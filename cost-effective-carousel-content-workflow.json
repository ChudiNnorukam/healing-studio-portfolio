{
  "name": "Cost-Effective Carousel & 30-Day Content Planner",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "carousel-content-planner",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "carousel-webhook",
      "name": "Carousel Content Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "carousel-content-planner"
    },
    {
      "parameters": {
        "jsCode": "// Cost-Effective Input Processing & Token Optimization\nconst input = $input.first().json;\n\n// Input validation and optimization\nconst topic = input.topic || 'inner child healing';\nconst audience = input.audience || 'trauma survivors';\nconst contentTypes = input.contentTypes || ['quote', 'infographic', 'exercise'];\nconst platforms = input.platforms || ['pinterest', 'instagram', 'linkedin'];\nconst monthlyBudget = input.monthlyBudget || 50; // USD budget\n\n// Token cost optimization based on research\nconst MODEL_COSTS = {\n  'gpt-4o-mini': { input: 0.15, output: 0.60 }, // per 1M tokens (cheapest)\n  'gpt-3.5-turbo': { input: 0.50, output: 1.50 },\n  'gpt-4': { input: 30.00, output: 60.00 }\n};\n\n// Clean and optimize input text (research-based)\nfunction optimizePromptText(text) {\n  // Remove unnecessary characters\n  text = text.replace(/[!?]+/g, '!');\n  text = text.replace(/\\s+/g, ' ');\n  text = text.trim();\n  \n  // Remove trailing punctuation that doesn't add value\n  while (text.length > 1 && text.slice(-1).match(/[,\\. ]/)) {\n    text = text.slice(0, -1);\n  }\n  \n  return text;\n}\n\n// Calculate optimal batch sizes for cost efficiency\nfunction calculateOptimalBatch(contentCount, budget) {\n  const estimatedTokensPerContent = 300; // Conservative estimate\n  const costPer1KTokens = MODEL_COSTS['gpt-4o-mini'].input + MODEL_COSTS['gpt-4o-mini'].output;\n  const estimatedCostPerContent = (estimatedTokensPerContent / 1000) * costPer1KTokens;\n  \n  const maxContentWithinBudget = Math.floor(budget / estimatedCostPerContent);\n  \n  return {\n    batchSize: Math.min(contentCount, maxContentWithinBudget),\n    estimatedCost: Math.min(contentCount, maxContentWithinBudget) * estimatedCostPerContent,\n    canGenerate: contentCount <= maxContentWithinBudget\n  };\n}\n\n// Content planning optimization\nconst CONTENT_TEMPLATES = {\n  carousel: {\n    pinterest: {\n      slides: 5,\n      format: '2:3 (1000x1500px)',\n      textOverlay: 'required',\n      keywords: ['#PinterestSEO', '#VisualContent']\n    },\n    instagram: {\n      slides: 10,\n      format: '1:1 (1080x1080px)',\n      textOverlay: 'minimal',\n      keywords: ['#IGCarousel', '#InstaContent']\n    },\n    linkedin: {\n      slides: 8,\n      format: '1.91:1 (1200x630px)',\n      textOverlay: 'professional',\n      keywords: ['#LinkedInContent', '#ProfessionalGrowth']\n    }\n  }\n};\n\n// Generate 30-day content calendar with cost optimization\nconst thirtyDayPlan = [];\nconst today = new Date();\n\nfor (let day = 0; day < 30; day++) {\n  const currentDate = new Date(today);\n  currentDate.setDate(today.getDate() + day);\n  \n  const dayOfWeek = currentDate.getDay();\n  const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n  \n  // Optimize posting schedule based on research\n  const postingTimes = {\n    pinterest: isWeekend ? '2:00 PM EST' : '8:00 PM EST',\n    instagram: '12:00 PM EST',\n    linkedin: '9:00 AM EST'\n  };\n  \n  // Content type rotation for variety\n  const contentType = contentTypes[day % contentTypes.length];\n  const platform = platforms[day % platforms.length];\n  \n  thirtyDayPlan.push({\n    date: currentDate.toISOString().split('T')[0],\n    day: day + 1,\n    contentType: contentType,\n    platform: platform,\n    optimalTime: postingTimes[platform],\n    carouselConfig: CONTENT_TEMPLATES.carousel[platform],\n    topic: `${topic} - ${contentType}`,\n    priority: day < 7 ? 'high' : day < 14 ? 'medium' : 'low'\n  });\n}\n\n// Cost calculation and optimization\nconst totalContentPieces = thirtyDayPlan.length;\nconst batchAnalysis = calculateOptimalBatch(totalContentPieces, monthlyBudget);\n\n// Token optimization strategies\nconst optimizationStrategy = {\n  model: 'gpt-4o-mini', // Cheapest effective model\n  batchProcessing: true,\n  caching: true,\n  promptOptimization: true,\n  structuredOutput: true,\n  maxTokensPerRequest: 800, // Conservative limit\n  useShorthandNotation: true // Like 's0, s1, s2' for content references\n};\n\n// Prompt templates optimized for token efficiency\nconst OPTIMIZED_PROMPTS = {\n  carousel: {\n    short: \"Create 5 ${contentType} slides about ${topic}. Format: s0:title|text s1:title|text...\",\n    tokens: 25\n  },\n  schedule: {\n    short: \"Generate posting schedule for ${platform}. Format: date|time|type\",\n    tokens: 15\n  },\n  hashtags: {\n    short: \"5 ${platform} hashtags for ${topic}. Format: #tag1,#tag2...\",\n    tokens: 18\n  }\n};\n\n// Cache strategy for repeated content\nconst cacheStrategy = {\n  enabled: true,\n  duration: '24 hours',\n  keyFormat: 'topic_contentType_platform',\n  expectedSavings: '50-70% token reduction'\n};\n\nconst result = {\n  success: true,\n  inputOptimization: {\n    originalTopic: topic,\n    optimizedTopic: optimizePromptText(topic),\n    tokensSaved: 'estimated 10-20%'\n  },\n  contentPlan: {\n    totalDays: 30,\n    totalContentPieces: totalContentPieces,\n    contentTypes: contentTypes,\n    platforms: platforms,\n    schedule: thirtyDayPlan.slice(0, 7), // First week preview\n    fullScheduleAvailable: true\n  },\n  costOptimization: {\n    selectedModel: 'gpt-4o-mini',\n    estimatedTokensPerContent: 300,\n    batchSize: batchAnalysis.batchSize,\n    estimatedMonthlyCost: batchAnalysis.estimatedCost.toFixed(2),\n    withinBudget: batchAnalysis.canGenerate,\n    potentialSavings: '70-90% vs GPT-4'\n  },\n  optimizationStrategy: optimizationStrategy,\n  promptTemplates: OPTIMIZED_PROMPTS,\n  caching: cacheStrategy,\n  nextSteps: [\n    'Generate carousel content using optimized prompts',\n    'Implement caching for repeated topics',\n    'Batch process content in groups of 5-10',\n    'Monitor token usage and adjust batch sizes'\n  ],\n  tokenEfficiencyTips: [\n    'Use structured output to minimize response tokens',\n    'Implement prompt caching for repeated requests',\n    'Batch similar content types together',\n    'Use shorthand notation for content references',\n    'Set max_tokens limit to control costs'\n  ],\n  carouselSpecs: CONTENT_TEMPLATES.carousel,\n  timestamp: new Date().toISOString(),\n  budgetAnalysis: {\n    monthlyBudget: monthlyBudget,\n    estimatedSpend: batchAnalysis.estimatedCost.toFixed(2),\n    remainingBudget: (monthlyBudget - batchAnalysis.estimatedCost).toFixed(2),\n    canGenerateAll: batchAnalysis.canGenerate\n  }\n};\n\nreturn [{ json: result }];"
      },
      "id": "cost-optimizer",
      "name": "Cost-Effective Planning Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "budget_check",
              "leftValue": "={{ $json.costOptimization.withinBudget }}",
              "rightValue": true,
              "operator": {
                "type": "boolean"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "budget-gate",
      "name": "Budget Validation Gate",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "maxTokens": 800,
          "temperature": 0.3
        },
        "messages": {
          "values": [
            {
              "content": "You are a cost-efficient carousel content generator. Create exactly 5 slides for a {{ $('Cost-Effective Planning Engine').first().json.inputOptimization.optimizedTopic }} carousel.\n\nFormat (save tokens):\ns0:title|description\ns1:title|description\ns2:title|description\ns3:title|description\ns4:title|description\n\nTarget: {{ $('Cost-Effective Planning Engine').first().json.contentPlan.platforms[0] }}\nAudience: trauma survivors seeking healing\n\nUse minimal words, maximum impact. No extra text.",
              "role": "user"
            }
          ]
        },
        "resource": "text",
        "operation": "message"
      },
      "id": "carousel-generator",
      "name": "Token-Optimized Carousel Generator",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 240]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "maxTokens": 600,
          "temperature": 0.2
        },
        "messages": {
          "values": [
            {
              "content": "Create detailed visual descriptions and copy suggestions for this {{ $('Cost-Effective Planning Engine').first().json.inputOptimization.optimizedTopic }} carousel.\n\nCarousel slides from first node:\n{{ $('Token-Optimized Carousel Generator').first().json.choices[0].message.content }}\n\nFor each slide, provide:\n1. Visual description (colors, imagery, layout)\n2. Copy suggestions (engaging text overlay)\n3. Call-to-action ideas\n4. Engagement hooks\n\nTarget platform: {{ $('Cost-Effective Planning Engine').first().json.contentPlan.platforms[0] }}\nAudience: trauma survivors seeking healing\n\nFormat:\nSlide 1: Visual: [description] | Copy: [text] | CTA: [action]\nSlide 2: Visual: [description] | Copy: [text] | CTA: [action]\n\nKeep trauma-informed and healing-focused.",
              "role": "user"
            }
          ]
        },
        "resource": "text",
        "operation": "message"
      },
      "id": "visual-copy-enhancer",
      "name": "Visual & Copy Enhancer",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 360]
    },
    {
      "parameters": {
        "jsCode": "// Parse and format carousel content with visual enhancements\nconst carouselRaw = $('Token-Optimized Carousel Generator').first().json.choices[0].message.content;\nconst visualEnhancementRaw = $('Visual & Copy Enhancer').first().json.choices[0].message.content;\nconst planningData = $('Cost-Effective Planning Engine').first().json;\n\n// Parse carousel slides\nconst slides = [];\nconst carouselLines = carouselRaw.split('\\n').filter(line => line.trim());\n\ncarouselLines.forEach(line => {\n  if (line.includes(':') && line.includes('|')) {\n    const [slideNum, content] = line.split(':');\n    const [title, description] = content.split('|');\n    \n    slides.push({\n      slideNumber: slideNum.trim(),\n      title: title?.trim() || '',\n      description: description?.trim() || '',\n      platform: planningData.contentPlan.platforms[0],\n      specs: planningData.carouselSpecs[planningData.contentPlan.platforms[0]]\n    });\n  }\n});\n\n// Parse visual enhancements\nconst visualEnhancements = {};\nconst enhancementLines = visualEnhancementRaw.split('\\n').filter(line => line.trim());\n\nenhancementLines.forEach(line => {\n  const slideMatch = line.match(/Slide (\\d+):\\s*Visual:\\s*(.+?)\\s*\\|\\s*Copy:\\s*(.+?)\\s*\\|\\s*CTA:\\s*(.+)/);\n  if (slideMatch) {\n    const slideNum = parseInt(slideMatch[1]);\n    visualEnhancements[slideNum] = {\n      visual: slideMatch[2].trim(),\n      copy: slideMatch[3].trim(),\n      cta: slideMatch[4].trim()\n    };\n  }\n});\n\n// Enhance slides with visual descriptions\nslides.forEach((slide, index) => {\n  const enhancement = visualEnhancements[index + 1];\n  if (enhancement) {\n    slide.visualDescription = enhancement.visual;\n    slide.copySuggestion = enhancement.copy;\n    slide.callToAction = enhancement.cta;\n    slide.productionReady = true;\n  } else {\n    slide.productionReady = false;\n  }\n  \n  // Add production checklist for each slide\n  slide.productionChecklist = {\n    content: `Create ${slide.title} slide about ${slide.description}`,\n    visual: slide.visualDescription || `Design slide with ${planningData.carouselSpecs[slide.platform].format} format`,\n    copy: slide.copySuggestion || `Write engaging text for ${slide.title}`,\n    cta: slide.callToAction || 'Add appropriate call-to-action',\n    hashtags: `Use ${slide.platform} specific hashtags for trauma healing`,\n    schedule: `Post at optimal time for ${slide.platform}`\n  };\n});\n\n// Cost tracking\nconst tokenUsage = {\n  carouselTokens: $('Token-Optimized Carousel Generator').first().json.usage?.total_tokens || 0,\n  visualTokens: $('Visual & Copy Enhancer').first().json.usage?.total_tokens || 0\n};\n\nconst totalTokens = tokenUsage.carouselTokens + tokenUsage.visualTokens;\nconst estimatedCost = (totalTokens / 1000) * (0.15 + 0.60); // gpt-4o-mini costs\n\n// Generate creation timeline\nconst creationTimeline = slides.map((slide, index) => ({\n  slideNumber: slide.slideNumber,\n  order: index + 1,\n  estimatedTime: '15-20 minutes',\n  difficulty: 'Medium',\n  priority: index < 2 ? 'High' : 'Medium',\n  dependencies: ['Topic research', 'Visual assets', 'Brand guidelines'],\n  tools: ['Canva/Figma', 'Stock photos', 'Brand colors']\n}));\n\nconst result = {\n  success: true,\n  carouselSummary: {\n    topic: planningData.inputOptimization.optimizedTopic,\n    platform: planningData.contentPlan.platforms[0],\n    totalSlides: slides.length,\n    format: planningData.carouselSpecs[planningData.contentPlan.platforms[0]].format,\n    contentFocus: planningData.carouselSpecs[planningData.contentPlan.platforms[0]].textOverlay,\n    targetAudience: 'trauma survivors seeking healing',\n    estimatedEngagement: 'High (trauma healing content performs well)',\n    bestPostingTime: planningData.contentPlan.platforms[0] === 'pinterest' ? '8:00 PM EST' : \n                     planningData.contentPlan.platforms[0] === 'instagram' ? '12:00 PM EST' : '9:00 AM EST'\n  },\n  \n  slides: slides,\n  \n  creationGuide: {\n    timeline: creationTimeline,\n    totalEstimatedTime: `${slides.length * 18} minutes (avg 18 min per slide)`,\n    recommendedOrder: [\n      '1. Review all slide content and visual descriptions',\n      '2. Gather visual assets (photos, icons, brand elements)',\n      '3. Create slides in batch (use consistent design)',\n      '4. Add text overlays with trauma-informed language',\n      '5. Review for accessibility and readability',\n      '6. Export in platform-specific format',\n      '7. Schedule post with optimized hashtags'\n    ],\n    designTips: [\n      'Use calming colors (soft blues, greens, pastels)',\n      'Choose readable fonts (avoid decorative fonts)',\n      'Maintain consistent branding across slides',\n      'Include breathing room (avoid cluttered designs)',\n      'Use trauma-informed imagery (safe, peaceful)',\n      'Ensure high contrast for accessibility'\n    ]\n  },\n  \n  contentStrategy: {\n    engagementTactics: [\n      'Start with relatable hook in slide 1',\n      'Use storytelling elements throughout',\n      'Include actionable tips in middle slides',\n      'End with empowering call-to-action',\n      'Use trauma-informed language'\n    ],\n    hashtagRecommendations: {\n      primary: ['#InnerChildHealing', '#TraumaRecovery', '#HealingJourney'],\n      secondary: ['#MentalHealthAwareness', '#SelfLove', '#EmotionalHealing'],\n      niche: ['#TraumaInformed', '#CPTSD', '#ChildhoodTrauma'],\n      platform: planningData.carouselSpecs[planningData.contentPlan.platforms[0]].keywords\n    },\n    captionStructure: {\n      hook: 'Start with question or relatable statement',\n      context: 'Provide brief background on topic',\n      value: 'Share key insights from carousel',\n      action: 'Include clear call-to-action',\n      hashtags: 'Use 10-15 relevant hashtags'\n    }\n  },\n  \n  costAnalysis: {\n    tokensUsed: totalTokens,\n    breakdown: {\n      carouselGeneration: tokenUsage.carouselTokens,\n      visualEnhancement: tokenUsage.visualTokens\n    },\n    estimatedCost: estimatedCost.toFixed(4),\n    budgetRemaining: (planningData.budgetAnalysis.monthlyBudget - estimatedCost).toFixed(2),\n    efficiency: 'Excellent - specialized carousel creation with visual guidance',\n    costPerSlide: (estimatedCost / slides.length).toFixed(4)\n  },\n  \n  nextSteps: [\n    'Review carousel slides and visual descriptions',\n    'Gather brand assets and visual elements',\n    'Create slides using provided specifications',\n    'Write engaging caption using content strategy',\n    'Schedule post at optimal time for platform',\n    'Monitor engagement and save high-performing elements for templates'\n  ],\n  \n  qualityChecklist: [\n    '✅ Content is trauma-informed and safe',\n    '✅ Visual descriptions are clear and actionable',\n    '✅ Text is accessible and easy to read',\n    '✅ Brand consistency maintained',\n    '✅ Platform format specifications met',\n    '✅ Call-to-action is clear and appropriate',\n    '✅ Hashtag strategy optimized for discovery'\n  ],\n  \n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: result }];"
      },
      "id": "content-processor",
      "name": "Content Processing & Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "workflow-response",
      "name": "Final Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Budget exceeded - provide cost optimization recommendations\nconst planningData = $('Cost-Effective Planning Engine').first().json;\n\nconst recommendations = {\n  error: 'Budget exceeded',\n  currentBudget: planningData.budgetAnalysis.monthlyBudget,\n  estimatedCost: planningData.costOptimization.estimatedMonthlyCost,\n  overage: (parseFloat(planningData.costOptimization.estimatedMonthlyCost) - planningData.budgetAnalysis.monthlyBudget).toFixed(2),\n  \n  solutions: {\n    reduceBatchSize: {\n      description: 'Generate content in smaller batches',\n      newBatchSize: Math.floor(planningData.budgetAnalysis.monthlyBudget / (planningData.costOptimization.estimatedMonthlyCost / planningData.costOptimization.batchSize)),\n      estimatedSavings: '50-70%'\n    },\n    useTemplates: {\n      description: 'Use pre-defined templates to reduce token usage',\n      estimatedSavings: '40-60%'\n    },\n    implementCaching: {\n      description: 'Cache similar content to avoid regeneration',\n      estimatedSavings: '60-80%'\n    },\n    adjustContentFrequency: {\n      description: 'Reduce from daily to 3x/week posting',\n      newCost: (parseFloat(planningData.costOptimization.estimatedMonthlyCost) * 0.43).toFixed(2)\n    }\n  },\n  \n  quickFix: {\n    action: 'Generate only high-priority content (first 7 days)',\n    cost: (parseFloat(planningData.costOptimization.estimatedMonthlyCost) * 0.23).toFixed(2),\n    withinBudget: true\n  },\n  \n  freeAlternatives: [\n    'Use ChatGPT web interface for content ideation',\n    'Leverage free Canva templates for carousel design',\n    'Use Google Sheets for content calendar planning',\n    'Implement manual content creation with AI assistance'\n  ],\n  \n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: recommendations }];"
      },
      "id": "budget-exceeded-handler",
      "name": "Budget Optimization Recommendations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    }
  ],
  "connections": {
    "Carousel Content Trigger": {
      "main": [
        [
          {
            "node": "Cost-Effective Planning Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cost-Effective Planning Engine": {
      "main": [
        [
          {
            "node": "Budget Validation Gate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Budget Validation Gate": {
      "main": [
        [
          {
            "node": "Token-Optimized Carousel Generator",
            "type": "main",
            "index": 0
          },
          {
            "node": "Visual & Copy Enhancer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Budget Optimization Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token-Optimized Carousel Generator": {
      "main": [
        [
          {
            "node": "Content Processing & Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Visual & Copy Enhancer": {
      "main": [
        [
          {
            "node": "Content Processing & Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Processing & Analysis": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Budget Optimization Recommendations": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
} 